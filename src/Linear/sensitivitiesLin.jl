# Sensitivity of fictious material with respect to design parameter 'd'
function drœà(dr_dd,dh,Œ®,Œª,d,Œì_robin,coord‚ÇÄ)
    assembler = start_assemble(dr_dd)
    ie = 0
    for cell in CellIterator(dh)
        ie += 1
        cell_dofs= celldofs(cell)
        dfe = zeros(6,6) ## 12x1 eller 12x12 ??
        for face in 1:nfaces(cell)
            if (cellid(cell), face) in Œì_robin
                face_nods = [ Ferrite.facedof_indices(ip)[face][1]; Ferrite.facedof_indices(ip)[face][2] ]
                face_dofs = [ face_nods[1]*2-1; face_nods[1]*2; face_nods[2]*2-1; face_nods[2]*2 ]
                X         = coord‚ÇÄ[ enod[ie][face_nods.+1] ,: ]
                dfe[face_dofs,face_dofs],_ = Robin(X,Œ®[cell_dofs[face_dofs]],d[cell_dofs[face_dofs]],Œª)
            end
        end
        # Dampened
        #assemble!(assembler, cell_dofs, -0.1dfe)
        # Regular
        assemble!(assembler, cell_dofs, -dfe)
    end
    return dr_dd
end

# Shape sensitivity of equillibrium residual
function dr·µ§_dx(dr,dh,mp,t,a,coord,enod,œÑ, Œìt)
    assembler = start_assemble(dr)
    ie = 0
    dr‚Çë = zeros(6,6)
    for cell in CellIterator(dh)
        ie += 1
        cell_dofs= celldofs(cell)
        dr‚Çë      = assem_dr(coord[enod[ie][2:end],:],a[cell_dofs],mp,t)
        dre      = zeros(6,6)
        for face in 1:nfaces(cell)
            if (cellid(cell), face) in Œìt
                face_nods                 = [ Ferrite.facedof_indices(ip)[face][1]; Ferrite.facedof_indices(ip)[face][2] ]
                face_dofs                 = [ face_nods[1]*2-1; face_nods[1]*2; face_nods[2]*2-1; face_nods[2]*2 ]
                X                         = coord[ enod[ie][face_nods.+1] ,: ]
                dre[face_dofs,face_dofs]  = dTractionLoad(X,œÑ)
            end
        end
        assemble!(assembler, cell_dofs, dr‚Çë+dre)
    end
    return dr
end

# Shape sensitivity of equillibrium residual
function dr·µ§_dx(dr, dh, mp, t, a, coord, enod)
    assembler = start_assemble(dr)
    ie = 0
    dr‚Çë = zeros(6, 6)
    for cell in CellIterator(dh)
        ie += 1
        cell_dofs = celldofs(cell)
        dr‚Çë = assem_dr(coord[enod[ie][2:end], :], a[cell_dofs], mp, t)
        dre = zeros(6, 6)
        assemble!(assembler, cell_dofs, dr‚Çë + dre)
    end
    return dr
end


function dr·µ§_dx_c(‚àÇr·µ§_‚àÇx, dh, mp, t, a, coord, enod, Œµ)
    assembler = start_assemble(‚àÇr·µ§_‚àÇx)
    ie = 0
    dr‚Çë = zeros(6, 6)
    for cell in CellIterator(dh)
        ie += 1
        cell_dofs = celldofs(cell)
        dr‚Çë = assem_dr(coord[enod[ie][2:end], :], a[cell_dofs], mp, t)
        dre = zeros(6, 6)
        assemble!(assembler, cell_dofs, dr‚Çë + dre)
    end

    X_ordered = getXinDofOrder(dh, X, coord)
    drc       = ForwardDiff.jacobian(x -> contact_residual_ordered(x, a, Œµ), X_ordered)
    # dr[contact_dofs,contact_dofs] += drc[contact_dofs,contact_dofs]
    ‚àÇr·µ§_‚àÇx   -= drc

    return ‚àÇr·µ§_‚àÇx
end
# Shape sensitivity of external forces
function dFext_dx(dF,dh,mp,t,a,coord,enod,œÑ, Œìt)
    assembler = start_assemble(dF)
    ie = 0
    for cell in CellIterator(dh)
        ie += 1
        cell_dofs= celldofs(cell)
        dre      = zeros(6,6)
        for face in 1:nfaces(cell)
            if (cellid(cell), face) in Œìt
                face_nods                 = [ Ferrite.facedof_indices(ip)[face][1]; Ferrite.facedof_indices(ip)[face][2] ]
                face_dofs                 = [ face_nods[1]*2-1; face_nods[1]*2; face_nods[2]*2-1; face_nods[2]*2 ]
                X                         = coord[ enod[ie][face_nods.+1] ,: ]
                dre[face_dofs,face_dofs]  = dTractionLoad(X,œÑ)
            end
        end
        assemble!(assembler, cell_dofs, -dre)
    end
    return dF
end

# Shape sensitivity of equillibrium residual including contact
function dr·µ§_dx_c(‚àÇr·µ§_‚àÇx, dh, mp, t, a, coord, enod, Œµ)
    assembler = start_assemble(‚àÇr·µ§_‚àÇx)
    ie = 0
    dr‚Çë = zeros(6, 6)
    for cell in CellIterator(dh)
        ie += 1
        cell_dofs = celldofs(cell)
        dr‚Çë = assem_dr(coord[enod[ie][2:end], :], a[cell_dofs], mp, t)
        dre = zeros(6, 6)
        assemble!(assembler, cell_dofs, dr‚Çë + dre)
    end

    X_ordered = getXinDofOrder(dh, X, coord)
    drc       = ForwardDiff.jacobian(x -> contact_residual_ordered(x, a, Œµ), X_ordered)
    # dr[contact_dofs,contact_dofs] += drc[contact_dofs,contact_dofs]
    ‚àÇr·µ§_‚àÇx   -= drc

    return ‚àÇr·µ§_‚àÇx
end

# Shape sensitivity of equillibrium residual including contact for two materials
function dr·µ§_dx_c(‚àÇr·µ§_‚àÇx, dh, t, a, coord, enod, Œµ, mp‚ÇÅ, mp‚ÇÇ)
    assembler = start_assemble(‚àÇr·µ§_‚àÇx)
    ie = 0
    dr‚Çë = zeros(6, 6)
    for cell in CellIterator(dh)
        ie += 1
        cell_dofs = celldofs(cell)
        if ie ‚àà dh.grid.cellsets["top mesh"]
            mp = mp‚ÇÅ
        else
            mp = mp‚ÇÇ
        end
        dr‚Çë = assem_dr(coord[enod[ie][2:end], :], a[cell_dofs], mp, t)
        dre = zeros(6, 6)
        assemble!(assembler, cell_dofs, dr‚Çë + dre)
    end

    X_ordered = getXinDofOrder(dh, X, coord)
    drc = ForwardDiff.jacobian(x -> contact_residual_ordered(x, a, Œµ), X_ordered)
    # dr[contact_dofs,contact_dofs] += drc[contact_dofs,contact_dofs]
    ‚àÇr·µ§_‚àÇx -= drc

    return ‚àÇr·µ§_‚àÇx
end

# Shape sensitivity of fictitious residual including contact
function drŒ®_dx_c(‚àÇrŒ®_‚àÇx, dh0, mp‚ÇÄ, t, Œ®, coord‚ÇÄ, enod, Œª, d, Œì_robin, Œº)
    assembler = start_assemble(‚àÇrŒ®_‚àÇx)
    ie = 0
    for cell in CellIterator(dh0)
        ie += 1
        cell_dofs = celldofs(cell)
        k‚Çë = zeros(6, 6)
        f‚Çë = zeros(6)
        k‚Çë, _ = assemElem(coord‚ÇÄ[enod[ie][2:end], :], Œ®[cell_dofs], mp‚ÇÄ, t)
        ke = zeros(6, 6)
        fe = zeros(6)
        for face in 1:nfaces(cell)
            if (cellid(cell), face) in Œì_robin
                face_nods = [Ferrite.facedof_indices(ip)[face][1]; Ferrite.facedof_indices(ip)[face][2]]
                face_dofs = [face_nods[1] * 2 - 1; face_nods[1] * 2; face_nods[2] * 2 - 1; face_nods[2] * 2]
                Xf = coord‚ÇÄ[enod[ie][face_nods.+1], :]
                ke[face_dofs, face_dofs], _ = Robin(Xf, Œ®[cell_dofs[face_dofs]], d[cell_dofs[face_dofs]], Œª)
            end
        end
        assemble!(assembler, cell_dofs, k‚Çë + ke)
    end
    # Contact
    X_ordered = getXfromCoord(coord‚ÇÄ)
    #X_ordered = getXinDofOrder(dh0, X, coord‚ÇÄ)
    Kc = ForwardDiff.jacobian(x -> contact_residual(x, Œ®, Œº), X_ordered)
    ‚àÇrŒ®_‚àÇx[contact_dofs, contact_dofs] -= Kc[contact_dofs, contact_dofs]

    #X_ordered = getXinDofOrder(dh0, X, coord‚ÇÄ)
    #drc       = ForwardDiff.jacobian(x -> contact_residual_ordered(x, Œ®, Œº), X_ordered)
    #‚àÇrŒ®_‚àÇx   -= drc
    return ‚àÇrŒ®_‚àÇx
end

# Objective function for p-norm of contact pressure
function contact_pnorm(X::AbstractVector{T1}, a::AbstractVector{T2}, Œµ, p) where {T1,T2}

   # Order displacements according to nodes and not dofs
   a_ordered = getDisplacementsOrdered(dh, a)

   # Scaling
   Œ∫ = gap_scaling(X)

   # convert X to Real for compatibility with ForwardDiff
   #X_float = real.(X)  + real.(a_ordered) # a ska vara sorterad p√• samma s√§tt som X, detta m√•ste fixas!!!!!!!!!
   X_float = real.(X + a_ordered) # a ska vara sorterad p√• samma s√§tt som X, detta m√•ste fixas!!!!!!!!!

   # Extract the coordinate vector (nbr_nodes x 2 )
   coordu = getCoordfromX(X_float)

   # Create dictionaries that are needed for the Mortar2D package
   elements, element_types, slave_elements, slave_element_ids, master_element_ids, coords = create_contact_list(dh, Œìs, Œìm, coordu)

   # Compute nodal normals
   normals = Mortar2D.calculate_normals(elements, element_types, coords)

   # Compute the projected gap function
   g = gap_function(X_float)

   #println("norm(scaling): ",norm(Œ∫))
   # Assemble D and M matrices and the slave and master dofs corresponding to the mortar segmentation
   slave_dofs, master_dofs, D, M = Mortar2D.calculate_mortar_assembly(elements, element_types, coords, slave_element_ids, master_element_ids)

   # ---------------- #
   # (‚àë‚Çê Œª‚Çê·µñ )^(1/p)  #
   # ---------------- #

   # Loop over master side dofs
    g‚ÇÄ = 0.0
   for (i, A) in enumerate(slave_dofs)
        Œª_A = penalty(g[i, :] ‚ãÖ normals[slave_dofs[i]], Œµ)
        g‚ÇÄ += (Œª_A  * (1 / Œ∫[i]))^p
   end

   # ---------------------------------- #
   # ‚à´·µß g ùõÖŒª dŒ≥ = 0 for penalty methods  #
   # ---------------------------------- #

   return (g‚ÇÄ)^(1/p)
end

# Objective function for p-norm of contact pressure | ordered
function contact_pnorm_ordered(X::AbstractVector{T1}, a::AbstractVector{T2}, Œµ,p) where {T1,T2}

    # Order  X
    X_ordered = getX_from_Dof_To_Node_order(dh, X)

    #X_ordered = getXinDofOrder(dh, X, coord)

    r_c = contact_pnorm(X_ordered, a, Œµ,p)

    return r_c
end

# Objective function for p-norm of contact pressure | Other version
function contact_pnorm_s(X::AbstractVector{T1}, a::AbstractVector{T2}, Œµ, p) where {T1,T2}

    # Order displacements according to nodes and not dofs
    a_ordered = getDisplacementsOrdered(dh, a)

    # Scaling
    Œ∫ = gap_scaling(X)

    # convert X to Real for compatibility with ForwardDiff
    #X_float = real.(X)  + real.(a_ordered) # a ska vara sorterad p√• samma s√§tt som X, detta m√•ste fixas!!!!!!!!!
    X_float = real.(X + a_ordered) # a ska vara sorterad p√• samma s√§tt som X, detta m√•ste fixas!!!!!!!!!

    # Extract the coordinate vector (nbr_nodes x 2 )
    coordu = getCoordfromX(X_float)

    # Create dictionaries that are needed for the Mortar2D package
    elements, element_types, slave_elements, slave_element_ids, master_element_ids, coords = create_contact_list(dh, Œìs, Œìm, coordu)

    # Compute nodal normals
    normals = Mortar2D.calculate_normals(elements, element_types, coords)

    # Compute the projected gap function
    g = gap_function(X_float)

    #println("norm(scaling): ",norm(Œ∫))
    # Assemble D and M matrices and the slave and master dofs corresponding to the mortar segmentation
    slave_dofs, master_dofs, D, M = Mortar2D.calculate_mortar_assembly(elements, element_types, coords, slave_element_ids, master_element_ids)

    # ---------------- #
    # (‚àë‚Çê Œª‚Çê·µñ )^(1/p)  #
    # ---------------- #

    # Loop over master side dofs
    g‚ÇÄ = 0.0
    Œ©  = 0.0
    p_mean = []
    for (i, A) in enumerate(slave_dofs)
        Œª_A = penalty(g[i, :] ‚ãÖ normals[slave_dofs[i]], Œµ)
        #g‚ÇÄ += (Œª_A * (1 / Œ∫[i]))
        if Œª_A != 0
            append!(p_mean, Œª_A * (1 / Œ∫[i]))
        end
    end

    #g‚ÇÄ = (g‚ÇÄ/length(p_mean) - mean(p_mean)^2)
    g‚ÇÄ = var(p_mean)

    # ---------------------------------- #
    # ‚à´·µß g ùõÖŒª dŒ≥ = 0 for penalty methods #
    # ---------------------------------- #
    return g‚ÇÄ
end

# Objective function for p-norm of contact pressure | Other version |
function contact_pnorm_ordered_s(X::AbstractVector{T1}, a::AbstractVector{T2}, Œµ, p) where {T1,T2}

    # Order  X
    X_ordered = getX_from_Dof_To_Node_order(dh, X)

    #X_ordered = getXinDofOrder(dh, X, coord)

    r_c = contact_pnorm_s(X_ordered, a, Œµ, p)

    return r_c
end

# Compute total contact area
function contact_area(X::AbstractVector{T1}, a::AbstractVector{T2}) where {T1,T2}

    # Order displacements according to nodes and not dofs
    a_ordered = getDisplacementsOrdered(dh, a)

    # Scaling
    Œ∫ = gap_scaling(X)

    # convert X to Real for compatibility with ForwardDiff
    #X_float = real.(X)  + real.(a_ordered) # a ska vara sorterad p√• samma s√§tt som X, detta m√•ste fixas!!!!!!!!!
    X_float = real.(X + a_ordered) # a ska vara sorterad p√• samma s√§tt som X, detta m√•ste fixas!!!!!!!!!

    # Extract the coordinate vector (nbr_nodes x 2 )
    coordu = getCoordfromX(X_float)

    # Create dictionaries that are needed for the Mortar2D package
    elements, element_types, slave_elements, slave_element_ids, master_element_ids, coords = create_contact_list(dh, Œìs, Œìm, coordu)

    # Compute nodal normals
    normals = Mortar2D.calculate_normals(elements, element_types, coords)

    # Compute the projected gap function
    g = gap_function(X_float)

    #println("norm(scaling): ",norm(Œ∫))
    # Assemble D and M matrices and the slave and master dofs corresponding to the mortar segmentation
    slave_dofs, master_dofs, D, M = Mortar2D.calculate_mortar_assembly(elements, element_types, coords, slave_element_ids, master_element_ids)

    # ---------------- #
    # (‚àë‚Çê Œª‚Çê·µñ )^(1/p)  #
    # ---------------- #

    # Loop over master side dofs
    Œ© = 0.0
    for (i, A) in enumerate(slave_dofs)
        Œ© += (penalty(g[i, :] ‚ãÖ normals[slave_dofs[i]], 1.0)) / Œ∫[i]
    end

    return Œ©
end

# Compute total contact area | input-dofs ordered to suit AD
function contact_area_ordered(X::AbstractVector{T1}, a::AbstractVector{T2}) where {T1,T2}

    # Order  X
    X_ordered = getX_from_Dof_To_Node_order(dh, X)

    #X_ordered = getXinDofOrder(dh, X, coord)

    r_c = contact_pnorm_s(X_ordered, a, Œµ, p)

    return r_c
end
